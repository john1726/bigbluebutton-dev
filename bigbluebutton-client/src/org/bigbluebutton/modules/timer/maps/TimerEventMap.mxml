<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<EventMap xmlns:mx="http://www.adobe.com/2006/mxml" xmlns="http://mate.asfusion.com/" >
	<mx:Script>
		<![CDATA[
            import com.asfusion.mate.events.Dispatcher;     
			import mx.events.FlexEvent;
            import org.bigbluebutton.core.EventConstants;
            import org.bigbluebutton.main.events.BBBEvent;
            import org.bigbluebutton.main.events.ModuleStartedEvent;
			import org.bigbluebutton.modules.timer.events.StartTimerModuleEvent;
			import org.bigbluebutton.modules.timer.events.StopTimerModuleEvent;
            import org.bigbluebutton.modules.timer.events.SendPublicTimerMessageEvent;
            import org.bigbluebutton.modules.chat.events.TranscriptEvent;
            import org.bigbluebutton.modules.timer.services.TimerMessageService;
            import org.bigbluebutton.modules.timer.services.MessageReceiver;
            import org.bigbluebutton.modules.timer.services.MessageSender;
            import org.bigbluebutton.modules.timer.views.TimerWindow;
			import org.bigbluebutton.modules.timer.managers.TimerManager;
		]]>
	</mx:Script>
	
	
	<EventHandlers type="{FlexEvent.PREINITIALIZE}" >
		<ObjectBuilder cache="global" generator="{TimerManager}" /> 
	</EventHandlers>
	
	<EventHandlers type="{StartTimerModuleEvent.START_TIMER_MODULE}" >
		<MethodInvoker generator="{TimerManager}" method="moduleStarted" arguments="{event}" />
	</EventHandlers>
	
	<EventHandlers type="{StopTimerModuleEvent.STOP_TIMER_MODULE}" >
		<MethodInvoker generator="{TimerManager}" method="moduleEnded" />
	</EventHandlers>

  <EventHandlers type="{EventConstants.SEND_PUBLIC_TIMER_REQ}">        
    <MethodInvoker generator="{TimerMessageService}" method="sendPublicMessageFromApi" arguments="{event.message}"/>		
  </EventHandlers>
  
    <EventHandlers type="{SendPublicTimerMessageEvent.SEND_PUBLIC_TIMER_MESSAGE_EVENT}">        
 		<MethodInvoker generator="{TimerMessageService}" method="sendPublicTimerMessage" arguments="{event.timerMessage}"/>		
    </EventHandlers>

	<EventHandlers type="{TranscriptEvent.LOAD_TRANSCRIPT}" >
        <MethodInvoker generator="{TimerMessageService}" method="getPublicTimerMessages"/>
	</EventHandlers>    

  <EventHandlers type="{BBBEvent.RECONNECT_BIGBLUEBUTTON_SUCCEEDED_EVENT}" >
    <EventAnnouncer generator="{TranscriptEvent}" type="{TranscriptEvent.LOAD_TRANSCRIPT}"/>
  </EventHandlers>

  <Injectors target="{TimerMessageService}">
    <PropertyInjector targetKey="dispatcher" source="{scope.dispatcher}"/>
    <PropertyInjector targetKey="receiver" source="{MessageReceiver}"/>
    <PropertyInjector targetKey="sender" source="{MessageSender}"/>
  </Injectors>

  <Injectors target="{MessageReceiver}">
    <PropertyInjector targetKey="dispatcher" source="{scope.dispatcher}"/>
  </Injectors>
 
  <Injectors target="{MessageSender}">
    <PropertyInjector targetKey="dispatcher" source="{scope.dispatcher}"/>
  </Injectors>

</EventMap>
